#!/usr/bin/env raku

use v6.d;

my %*SUB-MAIN-OPTS = :named-anywhere;

use Saiph;
my Saiph $saiph .= new(:path(%*ENV<SAIPH_PATH>.?IO));

#| Initialize the database.
multi sub MAIN('create') {
	$saiph.create;
	say 'Done';
}

multi sub MAIN('add', $key) {
	die "Entry $key already exists" if $saiph.get-entry($key);
	say "New entry $key";
	my $entry = $saiph.new-entry;
	$entry.name = $key;
	$saiph.save-entry($entry);
}

#| List all entries in the database.
multi sub MAIN('list') {
	.say for $saiph.all.sort;
}

#| Add or edit the provided entry via an interactive editor.
multi sub MAIN('edit', $key) {
	my $entry = $saiph.get-entry($key);
	if $entry {
		say "Editing $key";
	} else {
		say "New entry $key";
		$entry = $saiph.new-entry;
		$entry.name = $key;
	}

	simple-entry-editor($entry);
	$saiph.save-entry($entry);
	CATCH {
		when X::Saiph::EditorAbort {
			say 'Exiting without changes';
		}
	}
}

#| Remove an entry from the database.
multi sub MAIN('delete', $key) {
	my $entry = $saiph.get-entry($key);
	die "Could not find entry $key" unless $entry;
	$saiph.remove-entry($entry);
}

#| Show all keys for the specified entry.
multi sub MAIN('show', $entry, Bool :$exact-match=False) {
	my $e;
	if $exact-match {
		$e = $saiph.get-entry($entry) // die "Could not find entry $entry";
	} else {
		$e = $saiph.smartfind($entry) // die "Could not find entry $entry";
	}
	.say for $e.map.keys;
}

#| Show the specified entry's value for the specified field.
multi sub MAIN('show', $entry, $field, Bool :$exact-match=False) {
	my $e;
	if $exact-match {
		$e = $saiph.get-entry($entry) // die "Could not find entry $entry";
	} else {
		$e = $saiph.smartfind($entry) // die "Could not find entry $entry";
	}
	say $e.map{$field} // die "Field $field not found in entry $entry";
}

#| Set the provided entry's field from STDIN (primarily for automation)
multi sub MAIN('set', $key, $field) {
	my $entry = $saiph.get-entry($key);
	my $value = $*IN.lines()[0];
	$entry.map{$field} = $value;
	$saiph.save-entry($entry);
}

#| With the specified entry, copy its field onto the clipboard.
multi sub MAIN('clip', $entry, $field) {
	my $e = $saiph.get-entry($entry) // die "Could not find entry $entry";
	my $value = $e.map{$field} // die "Field $field not found in entry $entry";
	$saiph.to-clipboard($value);
}

#| Find an entry by name and use it.
multi sub MAIN('auto', $name) {
	my $entry = $saiph.smartfind($name);

	for TEMPLATE -> $field {
		say "[$entry.name()] Copied $field to clipboard";
		$saiph.to-clipboard($entry.map{$field} // '');
	}
}


#| Interactively select an entry to use (requires fzf in path)
multi sub MAIN('fzf', Bool :$stdout) {
	my @all = $saiph.all.sort;
	my $proc = run('fzf', '--tac', :in, :out);
	$proc.in.spurt(@all.join("\n"), :close);
	my $name = $proc.out.slurp.chomp;

	sink $proc; # check for errors
	return unless $name;

	my $entry = $saiph.get-entry($name) // die "Could not find entry $name";

	for TEMPLATE -> $field {
		if $stdout {
			say "$field: {$entry.map{$field} // ''}";
		} else {
			say "[$entry.name()] Copied $field to clipboard";
			$saiph.to-clipboard($entry.map{$field} // '');
		}
	}
}

#| Verify database integrity.
multi sub MAIN('check-integrity') {
	for $saiph.all -> $key {
		print "$key ";
		$saiph.get-entry($key);
		say "OK";
	}
}
